version: "3.8"

services:
  php:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: php_app
    volumes:
      - ./php.ini:/usr/local/etc/php/php.ini
      - .:/var/www/html
      - ./sessions:/var/lib/php/sessions
    working_dir: /var/www/html
    # Remove dependency on nginx
    depends_on:
      - mysql

  nginx:
    image: nginx:latest
    container_name: nginx_server
    ports:
      - "8080:80"
    volumes:
      - .:/var/www/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php  # Only nginx depends on php

  mysql:
    image: mysql:8.0
    container_name: mysql_container
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin_container
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
    ports:
      - "8081:80"
    depends_on:
      - mysql

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI

  meilisearch:
    image: getmeili/meilisearch:v1.7
    container_name: meilisearch
    restart: unless-stopped
    environment:
      - MEILI_MASTER_KEY=myMasterKey
    ports:
      - "7700:7700"
    volumes:
      - meili_data:/meili_data

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - php-exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Change for security
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - prometheus

  php-exporter:
    image: hipages/php-fpm_exporter
    container_name: php-exporter
    ports:
      - "9253:9253"
    environment:
      - PHP_FPM_SCRAPE_URI=tcp://php:9000/status  # Adjust based on your setup
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # S3 API
      - "9091:9090"  # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server --console-address ":9090" /data
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

  nats:
    image: nats
    ports:
      - "4222:4222"

  kafka:
    image: confluentinc/cp-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    ports:
      - "9092:9092"

  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  portainer:
    image: portainer/portainer-ce:latest
    restart: always
    ports:
      - "8082:9000"
      - "9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  netdata:
    image: netdata/netdata:latest
    container_name: netdata
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - NET_ADMIN
    security_opt:
      - apparmor:unconfined
    ports:
      - "19999:19999"
    volumes:
      - netdata-config:/etc/netdata
      - netdata-lib:/var/lib/netdata
      - netdata-cache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
    environment:
      - NETDATA_CLAIM_TOKEN=<your-claim-token>  # Optional, if using Netdata Cloud
      - NETDATA_CLAIM_URL=https://app.netdata.cloud  # Optional
      - NETDATA_CLAIM_ROOMS=<your-claim-room>  # Optional
    healthcheck:
      test: [ "CMD", "netdata", "-W", "health" ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
  redis_data:
  meili_data:
  grafana_data:
  minio_data:
  portainer_data:
  netdata-config:
  netdata-lib:
  netdata-cache:

networks:
  default:
    driver: bridge
