$(document).ready(function () {
    let dice1;
    let dice2;
    let playerPosition = 0;
    let playerMoney = 1500;
    let currentPlayerInJail = false;
    let jailTurns = 0;

    function rollDice() {
        return Math.floor(Math.random() * 6) + 1;
    }

    $("#rollDice").click(function () {
        $("#rollDice").find('.spinner-border').removeClass('d-none');

        setTimeout(function () {
            dice1 = rollDice();
            dice2 = rollDice();
            const total = dice1 + dice2;
            $("#diceResult").text(`üé≤ ${dice1} + üé≤ ${dice2} = ${total}`);
            movePlayer(total);
            $("#rollDice").find('.spinner-border').addClass('d-none');
        }, 1200)
    });

    function movePlayer(steps) {
        let currentPos = playerPosition;
        let targetPos = (playerPosition + steps) % $(".tile").length;

        function stepAnimation() {
            if (currentPos !== targetPos) {
                $(".tile").eq(currentPos).removeClass('active');
                currentPos = (currentPos + 1) % $(".tile").length;
                $(".player").remove(); // X√≥a ng∆∞·ªùi ch∆°i kh·ªèi √¥ hi·ªán t·∫°i
                $(".tile").eq(currentPos).append('<div class="player">üö∂</div>').addClass('active'); // G·∫Øn v√†o √¥ m·ªõi

                setTimeout(stepAnimation, 300); // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô di chuy·ªÉn (300ms m·ªói b∆∞·ªõc)
            } else {
                playerPosition = targetPos; // C·∫≠p nh·∫≠t v·ªã tr√≠ ng∆∞·ªùi ch∆°i
                checkTile($(".tile").eq(playerPosition)); // Ki·ªÉm tra √¥ sau khi d·ª´ng
            }
        }

        if (currentPlayerInJail) {
            tryToEscapeJail(stepAnimation);
        } else {
            stepAnimation();
        }
    }


    function checkTile(tile) {
        if (tile.hasClass("property") && !tile.hasClass("owned")) {
            let propertyName = tile.data("name");
            let price = tile.data("price");

            setTimeout(function () {
                Swal.fire({
                    title: 'MUA T√ÄI S·∫¢N',
                    text: `B·∫°n c√≥ mu·ªën mua ${propertyName} v·ªõi gi√° ${price}$ kh√¥ng?`,
                    icon: 'warning',
                    showCancelButton: !0,
                    customClass: {
                        confirmButton: 'btn btn-primary w-xs me-2 mt-2',
                        cancelButton: 'btn btn-danger w-xs mt-2',
                    },
                    confirmButtonText: "ƒê·ªìng √ù",
                    cancelButtonText: "Kh√¥ng",
                    buttonsStyling: !1,
                    showCloseButton: !0
                })
                    .then(function (t) {
                        if (t.value) {
                            tile.addClass("owned").css("background-color", "gold");
                            tile.attr("data-owner", "player1");
                            updateMoney(-price);
                        }
                    })
            }, 800);
        } else if (tile.hasClass("tax")) {
            let amount = tile.data("amount");
            setTimeout(function () {
                Swal.fire({
                    title: "THU·∫æ",
                    text: `B·∫°n ph·∫£i tr·∫£ ${amount}$ ti·ªÅn thu·∫ø.`,
                    icon: "warning"
                }).then(function (t) {
                    if (t.value) {
                        updateMoney(-amount);
                    }
                });
            }, 800);
        } else if (tile.hasClass("chance")) {
            let chanceCards = [
                { text: "Nh·∫≠n $200 t·ª´ ng√¢n h√†ng!", effect: () => updateMoney(200) },
                { text: "Tr·∫£ $100 ti·ªÅn thu·∫ø!", effect: () => updateMoney(-100) },
                { text: "ƒêi t·ªõi √¥ B·∫Øt ƒë·∫ßu v√† nh·∫≠n $200!", effect: () => moveToStart() },
                { text: "Di chuy·ªÉn l√™n 3 √¥!", effect: () => movePlayer(3) },
                { text: "ƒêi t√π ngay l·∫≠p t·ª©c!", effect: () => goToJail() }
            ];

            let randomCard = chanceCards[Math.floor(Math.random() * chanceCards.length)];

            setTimeout(function () {
                Swal.fire({
                    title: "C∆† H·ªòI",
                    text: randomCard.text,
                    icon: "success"
                }).then(function (t) {
                    if (t.value) {
                        randomCard.effect();
                    }
                });
            }, 800);
        } else if (tile.hasClass("owned")) {
            let owner = tile.attr("data-owner"); // L·∫•y ch·ªß s·ªü h·ªØu √¥
            let rent = parseInt(tile.attr("data-rent")); // L·∫•y gi√° thu√™ t·ª´ data-rent
            const currentPlayer = 'player1';
            if (owner !== currentPlayer) { // N·∫øu √¥ kh√¥ng ph·∫£i do ng∆∞·ªùi ch∆°i hi·ªán t·∫°i s·ªü h·ªØu
                setTimeout(function () {
                    Swal.fire({
                        title: "TH√îNG B√ÅO",
                        text: `B·∫°n ƒëang ·ªü tr√™n √¥ c·ªßa ${owner}. B·∫°n ph·∫£i tr·∫£ $${rent}!`,
                        icon: "warning"
                    }).then(function (t) {
                        if (t.value) {
                            updateMoney(-rent); // Tr·ª´ ti·ªÅn ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
                            updateOwnerMoney(owner, rent); // C·ªông ti·ªÅn cho ch·ªß s·ªü h·ªØu √¥
                        }
                    });
                }, 800);
            } else {
                setTimeout(function () {
                    Swal.fire({
                        title: "TH√îNG B√ÅO",
                        text: "ƒê√¢y l√† t√†i s·∫£n c·ªßa b·∫°n, b·∫°n kh√¥ng c·∫ßn tr·∫£ ti·ªÅn.",
                        icon: "info"
                    });
                }, 800);
            }
        } else if (tile.hasClass("jail")) {
            setTimeout(function () {
                currentPlayerInJail = true;
                Swal.fire({
                    title: "TH√îNG B√ÅO",
                    text: "B·∫°n ƒëang gh√© thƒÉm nh√† t√π.",
                    icon: "warning"
                });
            }, 800);
        }
    }

    function updateMoney(amount) {
        let playerMoney = parseInt($("#playerMoney").text());
        playerMoney += amount;
        $("#playerMoney").text(playerMoney);
    }

    function updateOwnerMoney(owner, amount) {
        let ownerMoney = parseInt($(`#${owner}-money`).text());
        ownerMoney += amount;
        $(`#${owner}-money`).text(ownerMoney);
    }

    function moveToStart() {
        movePlayerImmediately(0);
        updateMoney(200);
    }

    function goToJail() {
        let jailTile = $(".tile[data-name='Nh√† T√π']").index();
        movePlayerImmediately(jailTile);
    }

    function movePlayerImmediately(position) {
        let currentPos = playerPosition;
        $(".tile").eq(currentPos).removeClass('active');
        $(".player").remove();
        $(".tile").eq(position).append('<div class="player">üö∂</div>').addClass('active');
        playerPosition = position;
    }

    function tryToEscapeJail(stepAnimation) {
        if (dice1 === dice2) {
            Swal.fire({
                title: "CH√öC M·ª™NG",
                text: "B·∫°n ƒë·ªï ƒë√¥i! B·∫°n ƒë∆∞·ª£c ra t√π!",
                icon: "success"
            }).then(function (t) {
                if (t.value) {
                    currentPlayerInJail = false;
                    jailTurns = 0;
                    stepAnimation();
                }
            });
        } else {
            jailTurns++;
            Swal.fire({
                title: "CHIA BU·ªíN",
                text: `B·∫°n v·∫´n ·ªü trong t√π (${jailTurns}/3 l∆∞·ª£t). B·∫°n c√≥ th·ªÉ tr·∫£ $50 ƒë·ªÉ ra kh·ªèi t√π!`,
                icon: "error",
                showCancelButton: !0,
                customClass: {
                    confirmButton: 'btn btn-primary w-xs me-2 mt-2',
                    cancelButton: 'btn btn-danger w-xs mt-2',
                },
                confirmButtonText: "ƒê·ªìng √ù",
                cancelButtonText: "Kh√¥ng",
                buttonsStyling: !1,
                showCloseButton: !0,
                allowOutsideClick: false
            }).then(function (t) {
                if (t.value) {
                    payToEscape(stepAnimation);
                }
            });
        }
    }

    function payToEscape(stepAnimation) {
        if (!currentPlayerInJail) return;

        let playerMoney = parseInt($("#playerMoney").text());
        if (playerMoney >= 50) {
            playerMoney -= 50;
            $("#playerMoney").text(playerMoney);
            currentPlayerInJail = false;
            jailTurns = 0;
            stepAnimation();
        } else {
            Swal.fire({
                title: "TH√îNG B√ÅO",
                text: "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ tr·∫£!",
                icon: "error"
            });
        }
    }

});
